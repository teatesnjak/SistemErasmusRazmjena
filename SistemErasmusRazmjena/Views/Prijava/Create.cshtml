@model SistemErasmusRazmjena.Models.ViewModels.PrijavaCreateViewModel

@{
    ViewData["Title"] = "Nova prijava";
}

<h2>Nova prijava</h2>


<form asp-action="Create" asp-controller="Prijava" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="ErasmusProgramID" value="@Model.ErasmusProgramID" />
    <input type="hidden" asp-for="Naziv" />
    <input type="hidden" asp-for="AkademskaGodina" />
    <input type="hidden" asp-for="Semestar" />
    <input type="hidden" asp-for="Opis" />
    <input type="hidden" asp-for="Univerzitet" />
    <input type="hidden" asp-for="DateAdded" />

    <h2>Create Application for Erasmus Program</h2>

    <div>
        <h3>Program Details</h3>
        <p><strong>University:</strong> @Model.Univerzitet</p>
        <p><strong>Academic Year:</strong> @Model.AkademskaGodina</p>
        <p><strong>Semester:</strong> @Model.Semestar</p>
        <p><strong>Description:</strong> @Model.Opis</p>
        <p><strong>Date Added:</strong> @Model.DateAdded.ToString("MM/dd/yyyy")</p>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h3>Documentation</h3>
        </div>
        <div class="card-body">
            <div class="form-check mb-2">
                <input class="form-check-input" type="checkbox" asp-for="DokumentacijaOptions.CV" id="cvCheck" />
                <label class="form-check-label" for="cvCheck">CV</label>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" type="checkbox" asp-for="DokumentacijaOptions.MotivacionoPismo" id="motivationalCheck" />
                <label class="form-check-label" for="motivationalCheck">Motivational Letter</label>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" type="checkbox" asp-for="DokumentacijaOptions.UgovorOUcenju" id="learningCheck" />
                <label class="form-check-label" for="learningCheck">Learning Agreement</label>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Subjects</h3>
            <button type="button" id="addSubjectRow" class="btn btn-sm btn-primary">Add Subject</button>
        </div>
        <div class="card-body">
            <table id="subjectsTable" class="table">
                <thead>
                    <tr>
                        <th>Home University Subject</th>
                        <th>Accepting University Subject</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="subjectRows">
                    <tr class="subject-row">
                        <td>
                            <input type="text" name="PrijedlogPredmeta[0].PredmetHome" class="form-control" required />
                        </td>
                        <td>
                            <input type="text" name="PrijedlogPredmeta[0].PredmetAccepting" class="form-control" required />
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm remove-row">Remove</button>
                            <input type="hidden" name="PrijedlogPredmeta[0].Status" value="0" />
                            <input type="hidden" name="PrijedlogPredmeta[0].PredmetID" value="0" />
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="card-body mt-4">
        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">Submit Application</button>
            <a asp-controller="ErasmusProgram" asp-action="Index" class="btn btn-secondary">Cancel</a>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Display initial form values in console
            console.log("Initial ErasmusProgramID: ", "@Model.ErasmusProgramID");
            console.log("Initial StudentID: ", "@Model.StudentID");

            // Handle adding new row
            $("#addSubjectRow").click(function() {
                let rowCount = $("#subjectRows .subject-row").length;
                let newRow = `
                    <tr class="subject-row">
                        <td>
                            <input type="text" name="PrijedlogPredmeta[${rowCount}].PredmetHome" class="form-control" required />
                        </td>
                        <td>
                            <input type="text" name="PrijedlogPredmeta[${rowCount}].PredmetAccepting" class="form-control" required />
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm remove-row">Remove</button>
                            <input type="hidden" name="PrijedlogPredmeta[${rowCount}].Status" value="0" />
                            <input type="hidden" name="PrijedlogPredmeta[${rowCount}].PredmetID" value="0" />
                        </td>
                    </tr>
                `;
                $("#subjectRows").append(newRow);
            });

            // Handle removing row (delegated event for dynamically added elements)
            $("#subjectsTable").on("click", ".remove-row", function() {
                // Don't remove if it's the last row
                if ($("#subjectRows .subject-row").length > 1) {
                    $(this).closest("tr").remove();

                    // Renumber the inputs to ensure they're sequential
                    $("#subjectRows .subject-row").each(function(index) {
                        $(this).find("input").each(function() {
                            let name = $(this).attr("name");
                            let newName = name.replace(/\[\d+\]/, `[${index}]`);
                            $(this).attr("name", newName);
                        });
                    });
                } else {
                    // If it's the last row, just clear the inputs
                    $(this).closest("tr").find("input").val("");
                }
            });

            // Validate form on submit
            $("form").on("submit", function(e) {
                // Before form submission, double-check the ID is still present
                console.log("Form submitting...");
                console.log("ErasmusProgramID value: ", $("input[name='ErasmusProgramID']").val());

                let isValid = true;

                // Check if any subject rows are empty
                $(".subject-row").each(function() {
                    const homeSubject = $(this).find("input[name$='.PredmetHome']").val();
                    const acceptingSubject = $(this).find("input[name$='.PredmetAccepting']").val();

                    if (!homeSubject || !acceptingSubject) {
                        isValid = false;
                        // Mark the empty inputs
                        if (!homeSubject) $(this).find("input[name$='.PredmetHome']").addClass("is-invalid");
                        if (!acceptingSubject) $(this).find("input[name$='.PredmetAccepting']").addClass("is-invalid");
                    }
                });

                if (!isValid) {
                    console.log("Form validation failed");
                    e.preventDefault();
                    alert("Please fill in both home and accepting university subjects for all rows.");
                } else {
                    console.log("Form validation passed, submitting...");
                }
            });
        });
    </script>
}